# SPDX-FileCopyrightText: 2021 City of Tampere
#
# SPDX-License-Identifier: LGPL-2.1-or-later

version: 2.1

orbs:
  aws-cli: circleci/aws-cli@5.1.0
  aws-ecr: circleci/aws-ecr@9.3.2
  terraform: circleci/terraform@3.2.1

aliases:
  - &workspace_root /home/circleci/repo
  - &workspace_apigw /home/circleci/repo/evaka/apigw
  - &workspace_evaka_frontend /home/circleci/repo/evaka/frontend
  - &workspace_tre_frontend /home/circleci/repo/frontend
  - &workspace_service /home/circleci/repo/service
  - &workspace_auth /home/circleci/repo/auth

  - &base_image cimg/base:current-22.04
  - &aws_image cimg/aws:2024.03
  - &reuse_image fsfe/reuse:4.0.3 # NOTE: Update add-license-headers.sh to match

  - &default_config
    working_directory: *workspace_root

executors:
  base:
    docker:
      - image: cimg/base:current-22.04
  base_executor:
    <<: *default_config
    docker:
      - image: *base_image
  aws_executor:
    <<: *default_config
    docker:
      - image: *aws_image
  reuse_tool:
    <<: *default_config
    docker:
      - image: *reuse_image
  machine_executor:
    <<: *default_config
    machine:
      image: ubuntu-2404:current
    environment:
      NODE_ENV: development
      BUILDKIT_PROGRESS: plain

commands:
  # Misc commands

  checkout_with_submodules:
    steps:
      - checkout
      - run: git submodule sync
      - run: git submodule update --init

  setup_aws:
    steps:
      - aws-cli/setup:
          configure_default_region: false
          configure_profile_region: false
          role_arn: "arn:aws:iam::${AWS_ACCOUNT_ID}:role/${AWS_ROLE_NAME_CIRCLECI_UPLOAD}"
      - aws-ecr/ecr_login:
          account_id: ${AWS_ACCOUNT_ID}
          region: ${AWS_REGION}

  frontend_install:
    parameters:
      include_e2e:
        type: boolean
        default: false
    steps:
      - restore_cache:
          keys:
            - yarn-cache-frontend-v1-{{ checksum "evaka/frontend/yarn.lock" }}
            - yarn-cache-frontend-v1-
            - yarn-cache-frontend-
      - run:
          working_directory: *workspace_evaka_frontend
          command: yarn install --immutable
      - save_cache:
          key: yarn-cache-frontend-v1-{{ checksum "evaka/frontend/yarn.lock" }}
          paths:
            - evaka/frontend/.yarn/cache
            - /home/circleci/.npm/sentry-cli
      - when:
          condition:
            equal: [true, << parameters.include_e2e >>]
          steps:
            - restore_cache:
                name: Restore e2e yarn cache
                keys:
                  - yarn-cache-e2e-v3-{{ checksum "frontend/yarn.lock" }}
                  - yarn-cache-e2e-v3-
                  - yarn-cache-e2e-
            - run:
                working_directory: *workspace_tre_frontend
                command: |
                  yarn install --immutable
                  yarn playwright install chromium
            - save_cache:
                name: Store e2e yarn cache
                key: yarn-cache-e2e-v3-{{ checksum "frontend/yarn.lock" }}
                paths:
                  - frontend/.yarn/cache

  build_docker_image:
    parameters:
      image:
        type: string
      dir:
        type: string
      extra_build_args:
        type: string
        default: ""
      cache:
        type: string
    steps:
      - run:
          name: Build docker image
          command: |
            docker buildx create --driver=docker-container --name trevaka --node << parameters.cache >> --use
            docker buildx build --progress=plain \
              --cache-to mode=max,image-manifest=true,oci-mediatypes=true,type=registry,ref=${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/trevaka/build-cache:<< parameters.cache >>-${CIRCLE_SHA1} \
              $(readarray -t PARENT_COMMITS < <(git rev-parse ${CIRCLE_SHA1}^@); echo "${PARENT_COMMITS[@]/#/--cache-from type=registry,ref=${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/trevaka/build-cache:<< parameters.cache >>-}") \
              -t ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/trevaka/<< parameters.image >>:${CIRCLE_SHA1} \
              --build-arg "CACHE_BUST=$(date '+%Y-%V')" \
              --build-arg "build=${CIRCLE_BUILD_NUM}" \
              --build-arg "commit=${CIRCLE_SHA1}" \
              << parameters.extra_build_args >> \
              --push \
              --provenance=false \
              << parameters.dir >>

  terraform_install:
    steps:
      - terraform/install:
          terraform_version: 1.9.5

jobs:
  # MISC JOBS

  check_licenses:
    executor: reuse_tool
    resource_class: small
    steps:
      - checkout
      - run:
          name: reuse lint
          command: |
            reuse lint || {
              echo '';
              echo '=========================================';
              echo 'Please run: ./add-license-headers.sh';
              echo '=========================================';
              exit 1
            }

  terraform_lint:
    executor: base
    resource_class: small
    parameters:
      path:
        type: string
    steps:
      - checkout
      - terraform_install
      - terraform/validate:
          path: << parameters.path >>
      - terraform/fmt:
          path: << parameters.path >>
          recursive: true

  # BUILD JOBS

  datadog_build_image:
    executor: aws_executor
    resource_class: medium
    steps:
      - checkout_with_submodules
      - setup_remote_docker
      - setup_aws
      - build_docker_image:
          image: datadog
          dir: datadog
          cache: datadog

  apigw_build_image:
    executor: aws_executor
    resource_class: medium
    steps:
      - checkout_with_submodules
      - setup_remote_docker
      - setup_aws
      - build_docker_image:
          image: api-gateway
          dir: *workspace_apigw
          cache: api-gateway

  frontend_build_image:
    executor: aws_executor
    resource_class: large
    parameters:
      customizations:
        type: string
    steps:
      - checkout_with_submodules
      - setup_aws
      - run:
          name: Fetch commercial frontend dependencies
          working_directory: *workspace_evaka_frontend
          command: |
            aws s3 sync s3://trevaka-artifacts/vendor/fortawesome/ ./vendor/fortawesome/
      - run:
          name: Unpack commercial frontend dependencies
          working_directory: *workspace_evaka_frontend
          command: |
            ./unpack-pro-icons.sh
      - setup_remote_docker
      - build_docker_image:
          image: frontend/<< parameters.customizations >>
          dir: *workspace_evaka_frontend
          extra_build_args: --build-arg EVAKA_CUSTOMIZATIONS=<< parameters.customizations >> --build-arg ICONS=pro --build-context customizations=frontend/<< parameters.customizations >>
          cache: frontend-<< parameters.customizations >>

  service_build_image:
    executor: aws_executor
    resource_class: large
    steps:
      - checkout_with_submodules
      - setup_remote_docker
      - setup_aws
      - build_docker_image:
          image: service-builder
          dir: *workspace_service
          extra_build_args: --build-context core=evaka --target builder
          cache: service
      - build_docker_image:
          image: service
          dir: *workspace_service
          extra_build_args: --build-context core=evaka
          cache: service

  service_test:
    executor: machine_executor
    resource_class: large
    steps:
      - checkout_with_submodules
      - setup_aws
      - run:
          name: Start up compose stack
          command: docker compose --progress plain up --quiet-pull -d --build
      - run:
          name: Run tests
          command: |
            mkdir -p /tmp/service/build/{test-results,reports}
            docker run --rm --network=host \
              --mount type=bind,source="/tmp/service/build/test-results",destination=/service/build/test-results \
              --mount type=bind,source="/tmp/service/build/reports",destination=/service/build/reports \
              ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/trevaka/service-builder:${CIRCLE_SHA1} \
              ./gradlew --no-daemon check
      - run:
          name: Collect docker compose logs
          command: docker compose logs --tail=all > /tmp/docker-compose-logs.txt
          when: always
      - store_artifacts:
          path: /tmp/docker-compose-logs.txt
          destination: docker-compose-logs.txt
      - store_test_results:
          path: /tmp/service/build/test-results
      - store_artifacts:
          path: /tmp/service/build/reports
          destination: build/reports

  auth_build_image:
    executor: aws_executor
    resource_class: medium
    steps:
      - checkout_with_submodules
      - setup_remote_docker
      - setup_aws
      - build_docker_image:
          image: keycloak
          dir: *workspace_auth
          extra_build_args: --build-context core=evaka/keycloak
          cache: auth

  e2e_test:
    executor: machine_executor
    resource_class: large
    parameters:
      customizations:
        type: string
    steps:
      - checkout_with_submodules
      - setup_aws
      - run:
          name: Build compose stack
          command: docker compose build
      - run:
          name: Start up compose stack
          command: |
            CI=true LOCAL_DIR='../evaka/frontend' \
            EVAKA_FRONTEND_IMAGE=${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/trevaka/frontend/<< parameters.customizations >>:${CIRCLE_SHA1} \
            EVAKA_GW_IMAGE=${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/trevaka/api-gateway:${CIRCLE_SHA1} \
            EVAKA_SRV_IMAGE=${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/trevaka/service:${CIRCLE_SHA1} \
            docker compose --progress plain --profile evaka up --quiet-pull --no-build -d
          environment:
            EVAKA_CUSTOMIZATIONS: << parameters.customizations >>
      - frontend_install:
          include_e2e: true
      - run:
          name: Waiting for compose stack to be up...
          working_directory: *workspace_evaka_frontend
          command: ./wait-for-url.sh "http://localhost:9099/api/internal/dev-api/tampere" 204
      - run:
          name: Run E2E tests
          working_directory: *workspace_tre_frontend
          command: yarn e2e-ci-playwright
          environment:
            HEADLESS: true
            JEST_JUNIT_OUTPUT_DIR: test-results
      - run:
          name: Collect docker compose logs
          command: docker compose --profile evaka logs --tail=all > /tmp/docker-compose-logs.txt
          when: always
      - store_artifacts:
          path: /tmp/docker-compose-logs.txt
          destination: docker-compose-logs.txt
      - store_artifacts:
          path: frontend/screenshots
          destination: screenshots
      - store_artifacts:
          path: frontend/videos
          destination: videos
      - store_test_results:
          path: frontend/test-results

  deploy_frontends:
    parameters:
      municipality:
        type: string
      environment:
        type: string
      version:
        type: string
      role-arn:
        type: string
        default: ${AWS_ROLE_ARN_DEPLOY_CIRCLECI}
    executor: base
    resource_class: small
    steps:
      - setup_remote_docker
      - aws-cli/setup:
          configure_default_region: false
          configure_profile_region: false
          role_arn: "arn:aws:iam::${AWS_ACCOUNT_ID}:role/${AWS_ROLE_NAME_CIRCLECI_UPLOAD}"
      - aws-ecr/ecr_login:
          account_id: ${AWS_ACCOUNT_ID}
          region: ${AWS_REGION}
      - run:
          name: Download archive
          command: |
            docker pull ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/trevaka/frontend/<< parameters.municipality >>:<< parameters.version >>
            container_id=$(docker create ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/trevaka/frontend/<< parameters.municipality >>:<< parameters.version >>)
            docker cp "$container_id:/static" "frontend"
            docker rm "$container_id"
      - aws-cli/setup:
          configure_default_region: false
          configure_profile_region: false
          role_arn: << parameters.role-arn >>
      - run:
          name: Deploy
          command: |
            aws s3 sync ./frontend s3://${AWS_S3_BUCKET_STATIC} \
              --exact-timestamps \
              --exclude "*index.html" \
              --exclude "*service-worker.js" --exclude "*service-worker.js.map" \
              --include "maintenance-page/*"
  deploy_backends:
    executor: base
    resource_class: small
    parameters:
      municipality:
        type: string
      environment:
        type: string
      version:
        type: string
      role-arn:
        type: string
        default: ${AWS_ROLE_ARN_DEPLOY_CIRCLECI}
    steps:
      - checkout
      - aws-cli/setup:
          configure_default_region: false
          configure_profile_region: false
          role_arn: << parameters.role-arn >>
      - terraform_install
      - terraform/apply:
          backend_config: region=${TF_VAR_region},bucket=${TF_VAR_terraform_bucket}
          path: infra/deploy
          var: apps_version=<< parameters.version >>
          var_file: variables/<< parameters.municipality >>-<<parameters.environment >>-apps.tfvars

workflows:
  version: 2
  build_test_and_deploy:
    when:
      not:
        equal: [scheduled_pipeline, << pipeline.trigger_source >>]
    jobs:
      - check_licenses
      - terraform_lint:
          matrix:
            parameters:
              path:
                - infra/deploy

      - datadog_build_image:
          context:
            - trevaka-aws

      - apigw_build_image:
          context:
            - trevaka-aws

      - e2e_test:
          context:
            - trevaka-aws
          requires:
            - frontend_build_image-<< matrix.customizations >>
            - apigw_build_image
            - service_build_image
          matrix:
            parameters:
              customizations:
                - tampere

      - frontend_build_image:
          context:
            - trevaka-aws
          matrix:
            parameters:
              customizations:
                - tampere
                - vesilahti
                - hameenkyro
                - ylojarvi
                - pirkkala
                - nokia
                - kangasala
                - lempaala
                - orivesi

      - service_build_image:
          context:
            - trevaka-aws
      - service_test:
          context:
            - trevaka-aws
          requires:
            - service_build_image

      - auth_build_image:
          context:
            - trevaka-aws

      # tampere-dev
      - tampere_dev_approve:
          type: approval
          requires:
            - check_licenses
            - terraform_lint
            - datadog_build_image
            - auth_build_image
            - apigw_build_image
            - frontend_build_image
            - service_test
            - e2e_test
          filters:
            branches:
              only:
                - main
      - deploy_frontends:
          name: tampere_dev_frontends
          context:
            - trevaka-aws
            - tampere-evaka-dev
          requires:
            - tampere_dev_approve
          municipality: tampere
          environment: dev
          version: ${CIRCLE_SHA1}
      - deploy_backends:
          name: tampere_dev_backends
          context:
            - trevaka-aws
            - tampere-evaka-dev
          requires:
            - tampere_dev_frontends
          municipality: tampere
          environment: dev
          version: ${CIRCLE_SHA1}

      # tampere-test
      - deploy_frontends:
          name: tampere_test_frontends
          context:
            - trevaka-aws
            - tampere-evaka-test
          requires:
            - tampere_prod_approve
          municipality: tampere
          environment: test
          version: ${CIRCLE_SHA1}
      - deploy_backends:
          name: tampere_test_backends
          context:
            - trevaka-aws
            - tampere-evaka-test
          requires:
            - tampere_test_frontends
          municipality: tampere
          environment: test
          version: ${CIRCLE_SHA1}

      # tampere-prod
      - tampere_prod_approve:
          type: approval
          requires:
            - tampere_dev_backends
      - deploy_frontends:
          name: tampere_prod_frontends
          context:
            - trevaka-aws
            - tampere-evaka-prod
          requires:
            - tampere_prod_approve
          municipality: tampere
          environment: prod
          version: ${CIRCLE_SHA1}
      - deploy_backends:
          name: tampere_prod_backends
          context:
            - trevaka-aws
            - tampere-evaka-prod
          requires:
            - tampere_prod_frontends
          municipality: tampere
          environment: prod
          version: ${CIRCLE_SHA1}

      # other test environments
      - deploy_frontends:
          matrix:
            parameters:
              municipality:
                [
                  "vesilahti",
                  "hameenkyro",
                  "nokia",
                  "ylojarvi",
                  "pirkkala",
                  "kangasala",
                  "lempaala",
                  "orivesi",
                ]
          name: << matrix.municipality >>_test_frontends
          context:
            - trevaka-aws
            - << matrix.municipality >>-evaka-test
          requires:
            - tampere_dev_backends
          municipality: << matrix.municipality >>
          environment: test
          version: ${CIRCLE_SHA1}
      - deploy_backends:
          matrix:
            parameters:
              municipality:
                [
                  "vesilahti",
                  "hameenkyro",
                  "nokia",
                  "ylojarvi",
                  "pirkkala",
                  "kangasala",
                  "lempaala",
                  "orivesi",
                ]
          name: << matrix.municipality >>_test_backends
          context:
            - trevaka-aws
            - << matrix.municipality >>-evaka-test
          requires:
            - << matrix.municipality >>_test_frontends
          municipality: << matrix.municipality >>
          environment: test
          version: ${CIRCLE_SHA1}

      # other prod environments
      - deploy_frontends:
          matrix:
            parameters:
              municipality:
                [
                  "vesilahti",
                  "hameenkyro",
                  "nokia",
                  "ylojarvi",
                  "pirkkala",
                  "kangasala",
                  "lempaala",
                  "orivesi",
                ]
          name: << matrix.municipality >>_prod_frontends
          context:
            - trevaka-aws
            - << matrix.municipality >>-evaka-prod
          requires:
            - << matrix.municipality >>_test_backends
            - tampere_prod_backends
          municipality: << matrix.municipality >>
          environment: prod
          version: ${CIRCLE_SHA1}
      - deploy_backends:
          matrix:
            parameters:
              municipality:
                [
                  "vesilahti",
                  "hameenkyro",
                  "nokia",
                  "ylojarvi",
                  "pirkkala",
                  "kangasala",
                  "lempaala",
                  "orivesi",
                ]
          name: << matrix.municipality >>_prod_backends
          context:
            - trevaka-aws
            - << matrix.municipality >>-evaka-prod
          requires:
            - << matrix.municipality >>_prod_frontends
          municipality: << matrix.municipality >>
          environment: prod
          version: ${CIRCLE_SHA1}
