# SPDX-FileCopyrightText: 2021 City of Tampere
#
# SPDX-License-Identifier: LGPL-2.1-or-later

version: 2.1

orbs:
  aws-cli: circleci/aws-cli@4.1.2

aliases:
  - &workspace_root /home/circleci/repo
  - &workspace_apigw /home/circleci/repo/evaka/apigw
  - &workspace_evaka_frontend /home/circleci/repo/evaka/frontend
  - &workspace_tre_frontend /home/circleci/repo/frontend
  - &workspace_proxy /home/circleci/repo/evaka/proxy
  - &workspace_service /home/circleci/repo/service
  - &workspace_auth /home/circleci/repo/auth

  - &base_image cimg/base:current-22.04
  - &aws_image cimg/aws:2023.12
  - &reuse_image fsfe/reuse:1.1.2 # NOTE: Update add-license-headers.sh to match
  - &ubuntu_machine_image ubuntu-2204:2023.10.1

  - &default_config
    working_directory: *workspace_root

executors:
  base_executor:
    <<: *default_config
    docker:
      - image: *base_image
  aws_executor:
    <<: *default_config
    docker:
      - image: *aws_image
  reuse_tool:
    <<: *default_config
    docker:
      - image: *reuse_image
  machine_executor:
    <<: *default_config
    machine:
      image: *ubuntu_machine_image
    environment:
      NODE_ENV: development
      BUILDKIT_PROGRESS: plain

commands:
  # Misc commands

  checkout_with_submodules:
    steps:
      - checkout
      - run: git submodule sync
      - run: git submodule update --init

  login_docker_hub:
    description: Log in to Docker Hub for authenticated pulls
    steps:
      - run: echo "$DOCKERHUB_PASSWORD" | docker login -u "$DOCKERHUB_USERNAME" --password-stdin

  setup_authenticated_remote_docker:
    description: Setup remote Docker execution environment with Docker Hub authentication
    parameters:
      docker_layer_caching:
        type: boolean
        default: false
    steps:
      - setup_remote_docker:
          docker_layer_caching: << parameters.docker_layer_caching >>
      #- login_docker_hub

  setup_aws:
    steps:
      - aws-cli/setup:
          configure_default_region: false
          configure_profile_region: false
          role_arn: "arn:aws:iam::${AWS_ACCOUNT_ID}:role/${AWS_ROLE_NAME_CIRCLECI_UPLOAD}"
      - run:
          name: Log into Amazon ECR
          command: aws ecr get-login-password --region ${AWS_REGION} | docker login --username AWS --password-stdin ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com

  frontend_install:
    parameters:
      include_e2e:
        type: boolean
        default: false
    steps:
      - restore_cache:
          keys:
            - yarn-cache-frontend-v1-{{ checksum "evaka/frontend/yarn.lock" }}
            - yarn-cache-frontend-v1-
            - yarn-cache-frontend-
      - run:
          working_directory: *workspace_evaka_frontend
          command: yarn install --immutable
      - save_cache:
          key: yarn-cache-frontend-v1-{{ checksum "evaka/frontend/yarn.lock" }}
          paths:
            - evaka/frontend/.yarn/cache
            - /home/circleci/.npm/sentry-cli
      - when:
          condition:
            equal: [true, << parameters.include_e2e >>]
          steps:
            - restore_cache:
                name: Restore e2e yarn cache
                keys:
                  - yarn-cache-e2e-v3-{{ checksum "frontend/yarn.lock" }}
                  - yarn-cache-e2e-v3-
                  - yarn-cache-e2e-
            - restore_cache:
                name: Restore playwright browser cache
                keys:
                  - playwright-browser-cache-v1-{{ checksum "frontend/yarn.lock" }}
                  - playwright-browser-cache-v1-
                  - playwright-browser-cache-
            - run:
                working_directory: *workspace_tre_frontend
                command: |
                  yarn install --immutable
                  yarn playwright install chromium
            - save_cache:
                name: Store playwright browser cache
                key: playwright-browser-cache-v1-{{ checksum "frontend/yarn.lock" }}
                paths:
                  - /home/circleci/.cache/ms-playwright
            - save_cache:
                name: Store e2e yarn cache
                key: yarn-cache-e2e-v3-{{ checksum "frontend/yarn.lock" }}
                paths:
                  - frontend/.yarn/cache

  build_docker_image:
    parameters:
      image:
        type: string
      dir:
        type: string
      extra_build_args:
        type: string
        default: ""
    steps:
      - run:
          name: Build docker image
          working_directory: << parameters.dir >>
          command: |
            docker buildx build --progress=plain \
              -t ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/<< parameters.image >>:${CIRCLE_SHA1} \
              --build-arg "build=${CIRCLE_BUILD_NUM}" \
              --build-arg "commit=${CIRCLE_SHA1}" \
              << parameters.extra_build_args >> \
              --push \
              .

jobs:
  # MISC JOBS

  check_licenses:
    executor: reuse_tool
    resource_class: small
    steps:
      - checkout
      - run:
          name: reuse lint
          command: |
            reuse lint || {
              echo '';
              echo '=========================================';
              echo 'Please run: ./add-license-headers.sh';
              echo '=========================================';
              exit 1
            }

  # BUILD JOBS

  apigw_build_image:
    executor: aws_executor
    resource_class: medium
    steps:
      - checkout_with_submodules
      - setup_authenticated_remote_docker
      - setup_aws
      - build_docker_image:
          image: trevaka/api-gateway
          dir: *workspace_apigw

  frontend_build_image:
    executor: aws_executor
    resource_class: large
    parameters:
      customizations:
        type: string
    steps:
      - checkout_with_submodules
      - setup_aws
      - run:
          name: Fetch commercial frontend dependencies
          working_directory: *workspace_evaka_frontend
          command: |
            aws s3 sync s3://trevaka-artifacts/vendor/fortawesome/ ./vendor/fortawesome/
      - run:
          name: Unpack commercial frontend dependencies
          working_directory: *workspace_evaka_frontend
          command: |
            ./unpack-pro-icons.sh
      - setup_authenticated_remote_docker:
          docker_layer_caching: true
      - build_docker_image:
          image: trevaka/frontend/<< parameters.customizations >>
          dir: *workspace_evaka_frontend
          extra_build_args: --build-arg EVAKA_CUSTOMIZATIONS=<< parameters.customizations >> --build-arg ICONS=pro --build-context customizations=../../frontend/<< parameters.customizations >>

  service_build_image:
    executor: aws_executor
    resource_class: large
    steps:
      - checkout_with_submodules
      - setup_authenticated_remote_docker:
          docker_layer_caching: true
      - setup_aws
      - build_docker_image:
          image: trevaka/service-builder
          dir: *workspace_service
          extra_build_args: --build-context core=../evaka --target builder
      - build_docker_image:
          image: trevaka/service
          dir: *workspace_service
          extra_build_args: --build-context core=../evaka

  service_test:
    executor: machine_executor
    resource_class: large
    steps:
      - checkout_with_submodules
      - setup_aws
      - run:
          name: Start up compose stack
          command: docker-compose up -d --build
      - run:
          name: Run tests
          command: |
            mkdir -p /tmp/service/build/{test-results,reports}
            docker run --rm --network=host \
              --mount type=bind,source="/tmp/service/build/test-results",destination=/service/build/test-results \
              --mount type=bind,source="/tmp/service/build/reports",destination=/service/build/reports \
              ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/trevaka/service-builder:${CIRCLE_SHA1} \
              ./gradlew --no-daemon check
      - run:
          name: Collect docker-compose logs
          command: docker-compose logs --tail=all > /tmp/docker-compose-logs.txt
          when: always
      - store_artifacts:
          path: /tmp/docker-compose-logs.txt
          destination: docker-compose-logs.txt
      - store_test_results:
          path: /tmp/service/build/test-results
      - store_artifacts:
          path: /tmp/service/build/reports
          destination: build/reports

  auth_build_image:
    executor: aws_executor
    resource_class: medium
    steps:
      - checkout_with_submodules
      - setup_authenticated_remote_docker
      - setup_aws
      - build_docker_image:
          image: trevaka/auth
          dir: *workspace_auth
          extra_build_args: --build-context core=../evaka/keycloak

  scheduled_tasks_reporting_build_image:
    executor: aws_executor
    resource_class: medium
    steps:
      - checkout
      - setup_authenticated_remote_docker
      - setup_aws
      - build_docker_image:
          image: trevaka/scheduled-task/reporting
          dir: scheduled-tasks/reporting

  scheduled_tasks_logs_build_image:
    executor: aws_executor
    resource_class: medium
    steps:
      - checkout
      - setup_authenticated_remote_docker
      - setup_aws
      - build_docker_image:
          image: trevaka/scheduled-task/logs
          dir: scheduled-tasks/logs

  trigger_deploy:
    executor: base_executor
    resource_class: small
    steps:
      - run:
          name: Trigger deploy
          command: |
            curl --request POST \
              --url https://circleci.com/api/v2/project/github/Tampere/trevaka-infra/pipeline \
              --user ''$CIRCLE_TOKEN':' \
              --header 'content-type: application/json' \
              --data '{"branch":"main","parameters":{"workflow":"deploy_pipeline","version":"'$CIRCLE_SHA1'"}}'

  e2e_test:
    executor: machine_executor
    resource_class: large
    parameters:
      customizations:
        type: string
    steps:
      - checkout_with_submodules
      - setup_aws
      - run:
          name: Start up compose stack
          command: |
            CI=true LOCAL_DIR='../evaka/frontend' \
            EVAKA_FRONTEND_IMAGE=${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/trevaka/frontend/<< parameters.customizations >>:${CIRCLE_SHA1} \
            EVAKA_GW_IMAGE=${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/trevaka/api-gateway:${CIRCLE_SHA1} \
            EVAKA_SRV_IMAGE=${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/trevaka/service:${CIRCLE_SHA1} \
            docker-compose --profile evaka up -d
          environment:
            EVAKA_CUSTOMIZATIONS: << parameters.customizations >>
      - frontend_install:
          include_e2e: true
      - run:
          name: Waiting for compose stack to be up...
          working_directory: *workspace_evaka_frontend
          command: ./wait-for-url.sh "http://localhost:9999/api/internal/dev-api"
      - run:
          name: Run E2E tests
          working_directory: *workspace_tre_frontend
          command: yarn e2e-ci-playwright
          environment:
            HEADLESS: true
            BASE_URL: http://localhost:9999
            JEST_JUNIT_OUTPUT_DIR: test-results
      - run:
          name: Link customizations
          working_directory: *workspace_tre_frontend
          command: ./link.sh
      - run:
          name: yarn lint
          working_directory: *workspace_evaka_frontend
          command: |
            echo 'src/*' >> .eslintignore
            echo '!src/lib-customizations' >> .eslintignore
            yarn lint
      - run:
          name: Collect docker-compose logs
          command: docker-compose --profile evaka logs --tail=all > /tmp/docker-compose-logs.txt
          when: always
      - store_artifacts:
          path: /tmp/docker-compose-logs.txt
          destination: docker-compose-logs.txt
      - store_artifacts:
          path: frontend/screenshots
          destination: screenshots
      - store_artifacts:
          path: frontend/videos
          destination: videos
      - store_test_results:
          path: frontend/test-results

workflows:
  version: 2
  build_test_and_deploy:
    when:
      not:
        equal: [scheduled_pipeline, << pipeline.trigger_source >>]
    jobs:
      - check_licenses

      - apigw_build_image:
          context:
            - trevaka-aws

      - e2e_test:
          context:
            - trevaka-aws
          requires:
            - frontend_build_image-<< matrix.customizations >>
            - apigw_build_image
            - service_build_image
          matrix:
            parameters:
              customizations:
                - tampere

      - frontend_build_image:
          context:
            - trevaka-aws
          matrix:
            parameters:
              customizations:
                - tampere
                - vesilahti
                - hameenkyro

      - service_build_image:
          context:
            - trevaka-aws
      - service_test:
          context:
            - trevaka-aws
          requires:
            - service_build_image

      - auth_build_image:
          context:
            - trevaka-aws

      - scheduled_tasks_reporting_build_image:
          context:
            - trevaka-aws
      - scheduled_tasks_logs_build_image:
          context:
            - trevaka-aws

      - trigger_deploy:
          context:
            - trevaka-infra
          requires:
            - check_licenses
            - auth_build_image
            - scheduled_tasks_reporting_build_image
            - scheduled_tasks_logs_build_image
            - service_test
            - e2e_test
          filters:
            branches:
              only:
                - main
