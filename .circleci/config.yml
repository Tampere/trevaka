# SPDX-FileCopyrightText: 2021 City of Tampere
#
# SPDX-License-Identifier: LGPL-2.1-or-later

version: 2.1

orbs:
  aws-cli: circleci/aws-cli@1.4.0

aliases:
  - &workspace_root /home/circleci/repo
  - &workspace_evaka_base /home/circleci/repo/evaka/evaka-base
  - &workspace_apigw /home/circleci/repo/evaka/apigw
  - &workspace_frontend /home/circleci/repo/evaka/frontend
  - &workspace_proxy /home/circleci/repo/evaka/proxy
  - &workspace_service /home/circleci/repo/service
  - &workspace_message_service /home/circleci/repo/evaka/message-service
  - &workspace_auth /home/circleci/repo/auth
  - &yarn_cache .yarn_cache

  - &remote_docker_version "20.10.2"
  - &docker_layer_caching false
  - &base_image cimg/base:stable-20.04
  - &nodejs_image cimg/node:14.15
  - &ubuntu_machine_image ubuntu-2004:202101-01

  - &default_config
    working_directory: *workspace_root

  - &node_config
    <<: *default_config
    environment:
      YARN_CACHE_FOLDER: *yarn_cache

  - &jvm_config
    <<: *default_config
    environment:
      GRADLE_OPTS: '-Dorg.gradle.daemon=false -Dorg.gradle.jvmargs="-Xmx2048m"'
      GRADLE_USER_HOME: /home/circleci/repo/.gradle-user-home
      _JAVA_OPTIONS: "-Xmx2048m"

  - &restore_repo
    restore_cache:
      keys:
        - repo-v1-{{ .Branch }}-{{ .Revision }}

  - &store_repo
    save_cache:
      key: repo-v1-{{ .Branch }}-{{ .Revision }}
      paths:
        - .

  - &restore_apigw_node_modules
    restore_cache:
      keys:
        - node-modules-apigw-v1-{{ checksum "evaka/apigw/yarn.lock" }}
        - node-modules-apigw-v1-
        - node-modules-apigw-

  - &store_apigw_node_modules
    save_cache:
      key: node-modules-apigw-v1-{{ checksum "evaka/apigw/yarn.lock" }}
      paths:
        - apigw/node_modules

  - &restore_frontend_node_modules
    restore_cache:
      keys:
        - node-modules-frontend-v1-{{ checksum "evaka/frontend/yarn.lock" }}
        - node-modules-frontend-v1-
        - node-modules-frontend-

  - &store_frontend_node_modules
    save_cache:
      key: node-modules-frontend-v1-{{ checksum "evaka/frontend/yarn.lock" }}
      paths:
        - evaka/frontend/node_modules

  - &restore_service_gradle
    restore_cache:
      keys:
        - gradle-home-service-v1-{{ checksum "service/build.gradle.kts" }}-{{ checksum "service/settings.gradle.kts" }}-{{ checksum "service/buildSrc/build.gradle.kts" }}-{{ checksum "service/buildSrc/src/main/kotlin/TrevakaServiceDeps.kt" }}
        - gradle-home-service-v1-
        - gradle-home-service-

  - &store_service_gradle
    save_cache:
      key: gradle-home-service-v1-{{ checksum "service/build.gradle.kts" }}-{{ checksum "service/settings.gradle.kts" }}-{{ checksum "service/buildSrc/build.gradle.kts" }}-{{ checksum "service/buildSrc/src/main/kotlin/TrevakaServiceDeps.kt" }}
      paths:
        - service/.gradle
        - .gradle-user-home

  - &restore_message_service_gradle
    restore_cache:
      keys:
        - gradle-home-message-service-v1-{{ checksum "evaka/message-service/build.gradle.kts" }}-{{ checksum "evaka/message-service/gradle.properties" }}-{{ checksum "evaka/message-service/settings.gradle.kts" }}
        - gradle-home-message-service-v1-
        - gradle-home-message-service-

  - &store_message_service_gradle
    save_cache:
      key: gradle-home-message-service-v1-{{ checksum "evaka/message-service/build.gradle.kts" }}-{{ checksum "evaka/message-service/gradle.properties" }}-{{ checksum "evaka/message-service/settings.gradle.kts" }}
      paths:
        - message-service/.gradle
        - .gradle-user-home

executors:
  base_executor:
    <<: *default_config
    docker:
      - image: *base_image
  nodejs_executor:
    <<: *node_config
    docker:
      - image: *nodejs_image
  openjdk_executor:
    <<: *jvm_config
    machine:
      image: *ubuntu_machine_image

commands:
  attach_root_workspace:
    steps:
      - attach_workspace:
          at: *workspace_root

  login_docker_hub:
    description: Log in to Docker Hub for authenticated pulls
    steps:
      - run: echo "$DOCKERHUB_PASSWORD" | docker login -u "$DOCKERHUB_USERNAME" --password-stdin

  setup_authenticated_remote_docker:
    description: Setup remote Docker execution environment with Docker Hub authentication
    steps:
      - setup_remote_docker:
          version: *remote_docker_version
          docker_layer_caching: *docker_layer_caching
      #- login_docker_hub

  build_frontend:
    steps:
      - run:
          name: link customizations
          working_directory: *workspace_frontend
          command: ln -v -s $(readlink -f ../../frontend/tampere) src/lib-customizations/tampere
      - run:
          name: yarn build
          working_directory: *workspace_frontend
          environment:
            SENTRY_NO_PROGRESS_BAR: "1"
            EVAKA_CUSTOMIZATIONS: tampere
          command: |
            ICONS=free yarn build

  build_maintenance_page:
    steps:
      - run:
          name: yarn build-maintenance-page
          working_directory: *workspace_frontend
          command: yarn build-maintenance-page

  deploy_frontend:
    parameters:
      target_env:
        type: string
    steps:
      - attach_root_workspace
      - deploy_to_s3:
          target_env: << parameters.target_env >>
          from: frontend/dist/bundle/citizen-frontend
          to: citizen
      - deploy_to_s3:
          target_env: << parameters.target_env >>
          from: frontend/dist/bundle/employee-frontend
          to: employee
      - deploy_to_s3:
          target_env: << parameters.target_env >>
          from: frontend/dist/bundle/employee-mobile-frontend
          to: employee/mobile
      - deploy_to_s3:
          target_env: << parameters.target_env >>
          from: frontend/dist/maintenance-page
          to: maintenance-page

  deploy_to_s3:
    parameters:
      target_env:
        type: string
      from:
        type: string
      to:
        type: string
    steps:
      - run:
          name: Deploy (<< parameters.from >>)
          working_directory: /home/circleci/repo/evaka/<< parameters.from >>
          command: |
            aws s3 cp ./index.html s3://trevaka-<< parameters.target_env >>-static/<< parameters.to >>/index.html \
              --acl public-read

            if [ "<< parameters.target_env >>" = "prod" ]; then
              echo 'Target environment is prod, excluding source maps from deploy'
              EXTRA_ARGS=(
                '--exclude' '*.map'
              )
            fi
            aws s3 sync . s3://trevaka-<< parameters.target_env >>-static/<< parameters.to >> \
              --acl public-read \
              --exact-timestamps \
              --exclude "*index.html" \
              "${EXTRA_ARGS[@]}"

  load_base_image:
    steps:
      - run:
          name: Load base image
          working_directory: *workspace_root
          command: docker load -i evaka-base.tar

  build_docker_image:
    parameters:
      image:
        type: string
      dir:
        type: string
    steps:
      - run:
          name: Build docker image
          working_directory: << parameters.dir >>
          command: |
            docker build \
              -t << parameters.image >> \
              --build-arg "build=${CIRCLE_BUILD_NUM}" \
              --build-arg "commit=${CIRCLE_SHA1}" \
              .
      - run:
          name: Save docker image
          working_directory: << parameters.dir >>
          command: docker save << parameters.image >> > image.tar

  push_docker_image:
    parameters:
      image:
        type: string
      dir:
        type: string
    steps:
      - run:
          name: Load docker image
          working_directory: << parameters.dir >>
          command: docker load -i image.tar
      - run:
          name: Push docker image
          command: |
            aws ecr get-login-password --region eu-west-1 | docker login --username AWS --password-stdin 518207624130.dkr.ecr.eu-west-1.amazonaws.com
            docker tag << parameters.image >> 518207624130.dkr.ecr.eu-west-1.amazonaws.com/<< parameters.image >>:${CIRCLE_SHA1}
            docker push 518207624130.dkr.ecr.eu-west-1.amazonaws.com/<< parameters.image >>:${CIRCLE_SHA1}

jobs:
  # MISC JOBS

  checkout_repo:
    executor: base_executor
    steps:
      - checkout
      - run: git submodule sync
      - run: git submodule update --init
      - *store_repo

  # BUILD JOBS

  build_base_image:
    executor: base_executor
    steps:
      - *restore_repo
      - setup_authenticated_remote_docker
      - run:
          name: Build base image
          working_directory: *workspace_evaka_base
          command: docker build -t evaka-base .
      - run:
          name: Save base image
          working_directory: *workspace_root
          command: docker save evaka-base > evaka-base.tar
      - persist_to_workspace:
          root: *workspace_root
          paths:
            - evaka-base.tar

  apigw_build:
    executor: nodejs_executor
    steps:
      - *restore_repo
      - *restore_apigw_node_modules
      - run:
          working_directory: *workspace_apigw
          command: yarn install --immutable
      - *store_apigw_node_modules
      - run:
          working_directory: *workspace_apigw
          command: yarn build
      - persist_to_workspace:
          root: *workspace_root
          paths:
            - evaka/apigw/dist
            - *yarn_cache

  apigw_build_image:
    executor: base_executor
    steps:
      - *restore_repo
      - attach_root_workspace
      - setup_remote_docker:
          version: *remote_docker_version
          docker_layer_caching: *docker_layer_caching
      - load_base_image
      - build_docker_image:
          image: trevaka/api-gateway
          dir: *workspace_apigw
      - persist_to_workspace:
          root: *workspace_root
          paths:
            - evaka/apigw/image.tar

  apigw_push_image:
    <<: *default_config
    executor: aws-cli/default
    steps:
      - attach_root_workspace
      - setup_remote_docker:
          version: *remote_docker_version
      - aws-cli/install
      - push_docker_image:
          image: trevaka/api-gateway
          dir: *workspace_apigw

  frontend_build:
    executor: nodejs_executor
    steps:
      - *restore_repo
      - attach_root_workspace
      - *restore_frontend_node_modules
      - run:
          working_directory: *workspace_frontend
          command: yarn install --immutable
      - *store_frontend_node_modules
      - build_frontend
      - build_maintenance_page
      - persist_to_workspace:
          root: *workspace_root
          paths:
            - evaka/frontend/dist
            - *yarn_cache
      - run:
          working_directory: *workspace_frontend
          command: yarn lint-strict

  proxy_build_image:
    executor: base_executor
    steps:
      - *restore_repo
      - setup_authenticated_remote_docker
      - build_docker_image:
          image: trevaka/proxy
          dir: *workspace_proxy
      - persist_to_workspace:
          root: *workspace_root
          paths:
            - evaka/proxy/image.tar

  proxy_push_image:
    <<: *default_config
    executor: aws-cli/default
    steps:
      - *restore_repo
      - attach_root_workspace
      - setup_remote_docker:
          version: *remote_docker_version
      - aws-cli/install
      - push_docker_image:
          image: trevaka/proxy
          dir: *workspace_proxy

  service_build:
    executor: openjdk_executor
    steps:
      - *restore_repo
      - *restore_service_gradle
      - run:
          working_directory: *workspace_service
          command: ./gradlew build
      - *store_service_gradle
      - persist_to_workspace:
          root: *workspace_root
          paths:
            - service/build
      - store_artifacts:
          path: /home/circleci/repo/service/build/reports/

  service_build_image:
    executor: base_executor
    steps:
      - *restore_repo
      - attach_root_workspace
      - setup_remote_docker:
          version: *remote_docker_version
          docker_layer_caching: *docker_layer_caching
      - run:
          name: Unzip executable
          working_directory: *workspace_service
          command: unzip -q build/libs/trevaka-service.jar -d target
      - load_base_image
      - build_docker_image:
          image: trevaka/service
          dir: *workspace_service
      - persist_to_workspace:
          root: *workspace_root
          paths:
            - service/image.tar

  service_push_image:
    <<: *default_config
    executor: aws-cli/default
    steps:
      - *restore_repo
      - attach_root_workspace
      - setup_remote_docker:
          version: *remote_docker_version
      - aws-cli/install
      - push_docker_image:
          image: trevaka/service
          dir: *workspace_service

  message_service_build:
    executor: openjdk_executor
    steps:
      - *restore_repo
      - *restore_message_service_gradle
      - run:
          working_directory: *workspace_message_service
          command: ./gradlew build
      - *store_message_service_gradle
      - persist_to_workspace:
          root: *workspace_root
          paths:
            - evaka/message-service/build

  message_service_build_image:
    executor: base_executor
    steps:
      - *restore_repo
      - attach_root_workspace
      - setup_remote_docker:
          version: *remote_docker_version
          docker_layer_caching: *docker_layer_caching
      - run:
          name: Unzip executable
          working_directory: *workspace_message_service
          command: unzip -q build/libs/evaka-message-service.jar -d target
      - load_base_image
      - build_docker_image:
          image: trevaka/message-service
          dir: *workspace_message_service
      - persist_to_workspace:
          root: *workspace_root
          paths:
            - evaka/message-service/image.tar

  message_service_push_image:
    <<: *default_config
    executor: aws-cli/default
    steps:
      - *restore_repo
      - attach_root_workspace
      - setup_remote_docker:
          version: *remote_docker_version
      - aws-cli/install
      - push_docker_image:
          image: trevaka/message-service
          dir: *workspace_message_service

  auth_build_image:
    executor: base_executor
    steps:
      - *restore_repo
      - setup_authenticated_remote_docker
      - build_docker_image:
          image: trevaka/auth
          dir: *workspace_auth
      - persist_to_workspace:
          root: *workspace_root
          paths:
            - auth/image.tar

  auth_push_image:
    <<: *default_config
    executor: aws-cli/default
    steps:
      - *restore_repo
      - attach_root_workspace
      - setup_remote_docker:
          version: *remote_docker_version
      - aws-cli/install
      - push_docker_image:
          image: trevaka/auth
          dir: *workspace_auth

  # DEPLOY JOBS

  frontend_deploy:
    executor: aws-cli/default
    parameters:
      target_env:
        type: string
    steps:
      - aws-cli/install
      - deploy_frontend:
          target_env: << parameters.target_env >>

workflows:
  version: 2
  build_test_and_deploy:
    jobs:
      - checkout_repo
      - build_base_image:
          requires:
            - checkout_repo

      - apigw_build:
          requires:
            - checkout_repo
      - apigw_build_image:
          requires:
            - build_base_image
            - apigw_build
      - apigw_push_image:
          context:
            - trevaka-dev
          requires:
            - apigw_build_image

      - frontend_build:
          requires:
            - checkout_repo

      - proxy_build_image:
          requires:
            - checkout_repo
      - proxy_push_image:
          context:
            - trevaka-dev
          requires:
            - proxy_build_image

      - service_build:
          requires:
            - checkout_repo
      - service_build_image:
          requires:
            - build_base_image
            - service_build
      - service_push_image:
          context:
            - trevaka-dev
          requires:
            - service_build_image

      - message_service_build:
          requires:
            - checkout_repo
      - message_service_build_image:
          requires:
            - build_base_image
            - message_service_build
      - message_service_push_image:
          context:
            - trevaka-dev
          requires:
            - message_service_build_image

      - auth_build_image:
          requires:
            - checkout_repo
      - auth_push_image:
          context:
            - trevaka-dev
          requires:
            - auth_build_image

      - frontend_approve_dev_deploy:
          type: approval
          requires:
            - frontend_build
      - frontend_deploy:
          name: frontend_deploy_dev
          context:
            - trevaka-dev
          requires:
            - frontend_approve_dev_deploy
          target_env: dev
      - frontend_approve_test_deploy:
          type: approval
          requires:
            - frontend_build
      - frontend_deploy:
          name: frontend_deploy_test
          context:
            - trevaka-test
          requires:
            - frontend_approve_test_deploy
          target_env: test
