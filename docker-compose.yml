# SPDX-FileCopyrightText: 2021 City of Tampere
#
# SPDX-License-Identifier: LGPL-2.1-or-later

services:
  db:
    build: evaka/compose/db
    ports:
      - "5432:5432"
    volumes:
      - db-data:/var/lib/postgresql/data
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      EVAKA_DATABASES: evaka,evaka_tampere,evaka_vesilahti,evaka_hameenkyro,evaka_nokia,evaka_ylojarvi,evaka_pirkkala,evaka_kangasala,evaka_lempaala,evaka_orivesi
    healthcheck:
      test: "pg_isready -U postgres"
      interval: 2s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7.0-alpine
    ports:
      - "6379:6379"
    healthcheck:
      test: '[ "$$(redis-cli -h 127.0.0.1 ping)" == "PONG" ]'
      interval: 1s
      timeout: 5s
      retries: 5

  s3:
    image: adobe/s3mock:4.1.1
    ports:
      - "9091:9090"
      - "9876:9191" # for core tests
    volumes:
      - s3-data:/data
    environment:
      ROOT: /data
    healthcheck:
      test: [ "CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:9090" ]
      interval: 1s
      timeout: 5s
      retries: 5

  dummy-idp:
    build:
      context: evaka/dummy-idp
    init: true
    restart: on-failure
    ports:
      - "9090:9090"

  frontend:
    build:
      context: evaka/frontend
      additional_contexts: # requires docker-compose 2.17.0 or newer
        customizations: frontend/${EVAKA_CUSTOMIZATIONS}
      args:
        EVAKA_CUSTOMIZATIONS: ${EVAKA_CUSTOMIZATIONS}
    image: ${EVAKA_FRONTEND_IMAGE}
    ports:
      - "9099:8080"
    environment:
      # evaka/frontend/proxy/*
      RESOLVER: "127.0.0.11 ipv6=off"
      ENDUSER_GW_URL: "http://apigw:3000"
      INTERNAL_GW_URL: "http://apigw:3000"
      RATE_LIMIT_CIDR_WHITELIST: "0.0.0.0/0;::/0"
      HTTP_SCHEME: "http"
    depends_on:
      - apigw
    profiles:
      - evaka

  apigw:
    build: evaka/apigw
    image: ${EVAKA_APIGW_IMAGE}
    ports:
      - "3000"
    hostname: apigw
    depends_on:
      - redis
      - service
    volumes:
      - ./evaka/apigw/config/test-cert:/home/evaka/test-cert
    env_file:
      - .env
    environment:
      # evaka/apigw/entrypoint.sh
      VOLTTI_ENV: local
      # evaka/apigw/package.json
      NODE_ENV: local
      # local profile overrides for docker environment
      EVAKA_SERVICE_URL: http://service:8888
      REDIS_HOST: redis
      # ecosystem.config.js
      EVAKA_TITANIA_USERNAME: titania
      EVAKA_TITANIA_PASSWORD: titania
      AD_SAML_EXTERNAL_ID_PREFIX: tampere-ad
    profiles:
      - evaka

  service:
    build:
      context: service
      additional_contexts: # requires docker-compose 2.17.0 or newer
        core: evaka
    image: ${EVAKA_SERVICE_IMAGE}
    ports:
      - "8888:8888"
    hostname: service
    depends_on:
      - db
      - s3
    env_file:
      - .env
    environment:
      # service/entrypoint.sh
      VOLTTI_ENV: local
      JAVA_OPTS: -server -Djava.security.egd=file:/dev/./urandom -Xms1024m -Xss512k -Xmx1024m -XX:TieredStopAtLevel=1
      # local profile overrides for docker environment
      EVAKA_DATABASE_URL: jdbc:postgresql://db:5432/evaka_${EVAKA_CUSTOMIZATIONS}_local
      EVAKA_LOCAL_S3_URL: http://s3:9090
      EVAKA_BUCKET_PROXY_THROUGH_NGINX: true
      EVAKA_PASSWORD_BLACKLIST_DIRECTORY: /opt/password-blacklists
      # ecosystem.config.js
      SPRING_PROFILES_INCLUDE: local,trevaka-local
      SPRING_PROFILES_ACTIVE: ${EVAKA_CUSTOMIZATIONS}_evaka
    restart: unless-stopped
    profiles:
      - evaka

volumes:
  db-data:
    driver: local
  s3-data:
    driver: local
