# SPDX-FileCopyrightText: 2021 City of Tampere
#
# SPDX-License-Identifier: LGPL-2.1-or-later

services:
  db:
    build: compose/db
    ports:
      - "5432:5432"
    volumes:
      - db-data:/var/lib/postgresql/data
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    healthcheck:
      test: "pg_isready -U postgres"
      interval: 2s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7.0-alpine
    ports:
      - "6379:6379"
    healthcheck:
      test: '[ "$$(redis-cli -h 127.0.0.1 ping)" == "PONG" ]'
      interval: 1s
      timeout: 5s
      retries: 5

  s3:
    build:
      context: ./compose
      dockerfile: s3mock.Dockerfile
    ports:
      - "9090:9090"
      - "9876:9191" # for core tests
    volumes:
      - s3-data:/data
    environment:
      ROOT: /data
    healthcheck:
      test: [ "CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:9090" ]
      interval: 1s
      timeout: 5s
      retries: 5

  frontend:
    build:
      context: evaka/frontend
      additional_contexts: # requires docker-compose 2.17.0 or newer
        customizations: frontend/${EVAKA_CUSTOMIZATIONS}
      args:
        EVAKA_CUSTOMIZATIONS: ${EVAKA_CUSTOMIZATIONS}
    image: ${EVAKA_FRONTEND_IMAGE}
    ports:
      - "9099:8080"
    environment:
      RESOLVER: "127.0.0.11 ipv6=off"
      ENDUSER_GW_URL: "http://apigw:3000"
      INTERNAL_GW_URL: "http://apigw:3000"
      RATE_LIMIT_CIDR_WHITELIST: "0.0.0.0/0;::/0"
      HTTP_SCHEME: "http"
      KEYCLOAK_URL: "http://auth:8080"
      FORM_ACTION_URL: ""
    # Enable for debug logging
    # command: [nginx-debug, '-g', 'daemon off;']
    depends_on:
      - apigw
    profiles:
      - evaka

  apigw:
    build: evaka/apigw
    image: ${EVAKA_GW_IMAGE}
    ports:
      - "3000"
    hostname: apigw
    depends_on:
      - redis
      - service
    volumes:
      - ./evaka/apigw/config/test-cert:/home/evaka/test-cert
    env_file:
      - .env
    environment:
      VOLTTI_ENV: local
      NODE_ENV: local
      HTTP_PORT: 3000
      EVAKA_SERVICE_URL: ${EVAKA_SERVICE_URL}
      COOKIE_SECRET: cookie_secret
      REDIS_HOST: ${EVAKA_REDIS_HOST}
      REDIS_PORT: ${EVAKA_REDIS_PORT}
      REDIS_DISABLE_SECURITY: "true"
      JWT_PRIVATE_KEY: /home/evaka/test-cert/jwt_private_key.pem
      EVAKA_CUSTOMER_SAML_ENTRYPOINT: http://localhost:8080/auth/realms/citizens/protocol/saml
      EVAKA_CUSTOMER_SAML_ISSUER: trevaka
      EVAKA_CUSTOMER_SAML_PUBLIC_CERT: /home/evaka/test-cert/keycloak-local.pem
      EVAKA_CUSTOMER_SAML_PRIVATE_CERT: /home/evaka/test-cert/saml-private.pem
      EVAKA_SAML_ENTRYPOINT: http://localhost:8080/auth/realms/employees/protocol/saml
      EVAKA_SAML_ISSUER: trevaka
      EVAKA_SAML_PUBLIC_CERT: /home/evaka/test-cert/keycloak-local.pem
      EVAKA_SAML_PRIVATE_CERT: /home/evaka/test-cert/saml-private.pem
      AD_SAML_EXTERNAL_ID_PREFIX: tampere-ad
      ENABLE_DEV_API: "true"
      PRETTY_LOGS: "false"
    profiles:
      - evaka

  service:
    build:
      context: service
      additional_contexts: # requires docker-compose 2.17.0 or newer
        core: evaka
    image: ${EVAKA_SRV_IMAGE}
    ports:
      - "8888:8888"
    hostname: service
    depends_on:
      - db
      - s3
    env_file:
      - .env
    environment:
      VOLTTI_ENV: local
      SPRING_PROFILES_ACTIVE: local,trevaka-local,${EVAKA_CUSTOMIZATIONS}_evaka
      SPRING_PROFILES_INCLUDE: enable_dev_api,enable_mock_integration_endpoint
      JAVA_OPTS: -server -Djava.security.egd=file:/dev/./urandom -Xms1024m -Xss512k -Xmx1024m -XX:TieredStopAtLevel=1
      FLYWAY_USERNAME: ${EVAKA_SERVICE_FLYWAY_USERNAME}
      FLYWAY_PASSWORD: ${EVAKA_SERVICE_FLYWAY_PASSWORD}
      FLYWAY_PLACEHOLDERS_MIGRATION_USER: ${EVAKA_SERVICE_FLYWAY_USERNAME}
      FLYWAY_PLACEHOLDERS_APPLICATION_USER: ${EVAKA_SERVICE_APPLICATION_USERNAME}
      SPRING_DATASOURCE_URL: jdbc:postgresql://${EVAKA_DATABASE_HOST}:${EVAKA_DATABASE_PORT}/evaka_${EVAKA_CUSTOMIZATIONS}_local
      SPRING_DATASOURCE_USERNAME: ${EVAKA_SERVICE_APPLICATION_USERNAME}
      SPRING_DATASOURCE_PASSWORD: ${EVAKA_SERVICE_APPLICATION_PASSWORD}
      SPRING_MAIN_BANNER_MODE: "off"
      # DEBUG: "true"
      # LOGGING_LEVEL_FI_ESPOO_EVAKA: DEBUG
      FI_ESPOO_VOLTTI_DOCUMENT_BUCKET_CLUBDECISION: evaka-clubdecisions-dev
      FI_ESPOO_VOLTTI_DOCUMENT_BUCKET_DAYCAREDECISION: evaka-daycaredecisions-dev
      FI_ESPOO_VOLTTI_DOCUMENT_BUCKET_PAYMENTDECISION: evaka-paymentdecisions-dev
      FI_ESPOO_VOLTTI_S3MOCK_URL: ${S3MOCK_URL}
      FI_ESPOO_INTEGRATION_INVOICE_ENABLED: "false"
      FI_ESPOO_EVAKA_MESSAGE_ENABLED: "false"
      FI_ESPOO_INTEGRATION_VARDA_URL: "http://localhost:8888/mock-integration/varda/api"
      FI_ESPOO_INTEGRATION_BASIC_AUTH: ""
      FI_ESPOO_VARDA_FORCE_SYNC: "false"
      FI_ESPOO_VARDA_ORGANIZER: "Tampere"
      FI_ESPOO_INTEGRATION_KOSKI_URL: ""
      FI_ESPOO_INTEGRATION_KOSKI_USER: ""
      FI_ESPOO_INTEGRATION_KOSKI_SECRET: ""
      FI_ESPOO_INTEGRATION_KOSKI_SOURCE_SYSTEM: ""
    restart: unless-stopped
    profiles:
      - evaka

  auth:
    build:
      context: auth
      additional_contexts: # requires docker-compose 2.17.0 or newer
        core: evaka/keycloak
    ports:
      - "8080:8080"
      - "9000:9000" # management port for health endpoint
    environment:
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: admin
      KC_HTTP_RELATIVE_PATH: /auth
      KC_HEALTH_ENABLED: true
      KC_DB: postgres
      KC_DB_URL_HOST: db
      KC_DB_URL_PORT: 5432
      KC_DB_URL_DATABASE: keycloak
      KC_DB_USERNAME: postgres
      KC_DB_PASSWORD: postgres
      KC_FEATURES: persistent-user-sessions
    command: start-dev --import-realm
    volumes:
      - ./auth/realms/tampere:/opt/keycloak/data/import
    depends_on:
      - db
      - smtp
    profiles:
      - auth

  smtp:
    build:
      context: ./compose
      dockerfile: mailhog.Dockerfile
    ports:
      - "1025:1025" # smtp
      - "8025:8025" # http
    profiles:
      - auth

  identification:
    build: mock/identification
    ports:
      - "8081:8081"
    profiles:
      - auth

volumes:
  db-data:
    driver: local
  s3-data:
    driver: local
